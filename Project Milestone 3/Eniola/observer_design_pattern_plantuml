@startuml

' Observer interface
abstract class Observer {
    + update(message: str)
}

' User class extending Observer
abstract class User {
    - name: str
    - age: int
    - address: str
    - phone_number: str
    - username: str
    - password: str
    + get_role(): str
    + update(message: str)
}

' Concrete User classes
class Doctor {
    + get_role(): str
    + update(message: str)
}

class Patient {
    + get_role(): str
    + update(message: str)
}

class Nurse {
    + get_role(): str
    + update(message: str)
}

class SystemAdmin {
    + get_role(): str
}

class EdStaff {
    + get_role(): str
    + update(message: str)
}

' Notification class
class Notification {
    - notifications: list
    - observers: list
    + add_observer(observer: Observer)
    + remove_observer(observer: Observer)
    + add_notification(message: str)
    + add_notification_for_observer(message: str, observer: Observer)
    + view_notifications()
    + clear_notifications()
}

' Note for notify_observers with example code
note right of Notification
    + notify_observers(message: str) {
    for observer in observers:
        observer.update(message)
    }
end note

' Relationships
Subject -- Observer: "Observes"
Subject <|-- Notification : "is-a"
Observer <|-- User : "is-a"

Notification o-- "0..*" User : "maintains"
Notification --> User : "Notifies"

User <|-- Doctor : "is-a"
User <|-- Patient : "is-a"
User <|-- Nurse : "is-a"
User <|-- SystemAdmin : "is-a"
User <|-- EdStaff : "is-a"

@enduml
